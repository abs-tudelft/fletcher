resources:
  repositories:
  - repository: abs-tudelft
    type: github
    endpoint: github
    name: abs-tudelft/azure-pipelines-templates

variables:
  arrowVersion: 0.15.1

jobs:

- job:
  strategy:
    matrix:
      c:
        source: common/c
      common:
        source: common/cpp
      cerata:
        source: codegen/cpp/cerata
      fletchgen:
        source: codegen/cpp/fletchgen
      runtime:
        source: runtime/cpp
      echo:
        source: platforms/echo/runtime
  pool:
    vmImage: ubuntu-latest
  steps:
  - template: steps/set-cc-cxx.yml@abs-tudelft
    parameters:
      cc: gcc-7
      cxx: g++-7
  - template: steps/install-arrow.yml@abs-tudelft
    parameters:
      version: $(arrowVersion)
  - template: steps/install-cmake.yml@abs-tudelft
  - template: steps/cmake.yml@abs-tudelft
    parameters:
      source: $(source)
      args: -DBUILD_TESTS=ON

- template: jobs/vhdeps.yml@abs-tudelft
  parameters:
    name: hardware
    args: ["--pattern '*_tc'", "--pattern ':!*/vhlib/*'"]
    sources: ['hardware']
    preSteps:
    - checkout: self
      submodules: true

- job: example
  strategy:
    matrix:
      stringwrite:
        source: examples/stringwrite/hardware
      sum:
        source: examples/sum/hardware
      primmap:
        source: codegen/test/primmap
      stringread:
        source: codegen/test/stringread
  pool:
    vmImage: ubuntu-latest
  steps:
  - checkout: self
    submodules: true
  - template: steps/install-ghdl.yml@abs-tudelft
  - template: steps/install-cmake.yml@abs-tudelft
  - template: steps/install-python.yml@abs-tudelft
    parameters:
      packages: ['pyarrow', 'vhdeps', 'vhdmmio']
  - template: steps/set-cc-cxx.yml@abs-tudelft
    parameters:
      cc: gcc-7
      cxx: g++-7
  - template: steps/install-arrow.yml@abs-tudelft
    parameters:
      version: $(arrowVersion)
  - template: steps/cmake.yml@abs-tudelft
    parameters:
      args: '-DFLETCHER_BUILD_FLETCHGEN=ON'
  - script: |
      sudo make install
    displayName: Install runtime and fletchgen
  - script: |
      echo "##vso[task.setvariable variable=FLETCHER_DIR;]$(Build.SourcesDirectory)"
    displayName: Fletcher env
  - script: |
      make
    workingDirectory: $(Build.SourcesDirectory)/$(source)
    displayName: Generate hardware
  - script: |
      make sim
    workingDirectory: $(Build.SourcesDirectory)/$(source)
    displayName: Simulate hardware

- job:
  strategy:
    matrix:
      pyfletcher:
        source: runtime/python
        package: pyfletcher
      pyfletchgen:
        source: codegen/python
        package: pyfletchgen
  pool:
    vmImage: ubuntu-latest
  variables:
    PKG_CONFIG_ALLOW_SYSTEM_LIBS: 1
  steps:
  - template: steps/set-cc-cxx.yml@abs-tudelft
    parameters:
      cc: gcc-7
      cxx: g++-7
  - template: steps/install-python.yml@abs-tudelft
    parameters:
      packages: ['pyarrow', 'numpy', 'cython']
  - template: steps/install-arrow.yml@abs-tudelft
    parameters:
      version: $(arrowVersion)
  - template: steps/install-cmake.yml@abs-tudelft
  - script: |
      python3 setup.py build
    displayName: Build
    workingDirectory: $(Build.SourcesDirectory)/$(source)
  - script: |
      python3 setup.py bdist_wheel
    displayName: Wheel
    workingDirectory: $(Build.SourcesDirectory)/$(source)
  - script: |
      pip3 install build/dist/*whl
    workingDirectory: $(Build.SourcesDirectory)/$(source)
    displayName: Test wheel install
  - script: |
      python3 -c "import $(package)"
    displayName: Test import

- job: manylinux
  strategy:
    matrix:
      pyfletcher:
        source: runtime/python
        package: pyfletcher
      pyfletchgen:
        source: codegen/python
        package: pyfletchgen
  pool:
    vmImage: ubuntu-latest
  steps:
  - script: |
      for manylinux in 2010 2014; do
        docker build --build-arg ARROW_VERSION=$(arrowVersion) --build-arg MANYLINUX=$manylinux --build-arg PACKAGE=$(source) -t $(package)-manylinux:$manylinux - < misc/Dockerfile.python &&
        docker run --rm -v $(Build.SourcesDirectory):/io $(package)-manylinux:$manylinux
      done
    displayName: Build manylinux wheels
  - template: steps/install-python.yml@abs-tudelft
  - script: |
      pip3 install $(source)/wheelhouse/$(package)*37*manylinux*
    workingDirectory: $(Build.SourcesDirectory)
    displayName: Test install
  - script: |
      python3 -c "import $(package)"
    displayName: Test import
  - publish: $(Build.SourcesDirectory)/$(source)/wheelhouse
    artifact: $(package)-wheels

- template: jobs/mdbook-gh-pages.yml@abs-tudelft
  parameters:
    ref: refs/heads/develop
    preSteps:
    - template: ../steps/install-doxygen.yml
    - script: |
        doxygen
      workingDirectory: $(Build.SourcesDirectory)/codegen/cpp/fletchgen
      displayName: Doxygen (fletchgen)
    - script: |
        doxygen
      workingDirectory: $(Build.SourcesDirectory)/codegen/cpp/cerata
      displayName: Doxygen (cerata)
    - script: |
        doxygen
      workingDirectory: $(Build.SourcesDirectory)/runtime/cpp
      displayName: Doxygen (C++ runtime)
    beforePublishSteps:
    - script: |
        mkdir -p docs/book/api/cerata && mv codegen/cpp/cerata/docs/html docs/book/api/cerata &&
        mkdir -p docs/book/api/fletchgen && mv codegen/cpp/fletchgen/docs/html docs/book/api/fletchgen &&
        mkdir -p docs/book/api/fletcher-cpp && mv runtime/cpp/docs/html docs/book/api/fletcher-cpp
      workingDirectory: $(Build.SourcesDirectory)
      displayName: Add API docs


